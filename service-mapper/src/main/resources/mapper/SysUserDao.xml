<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tlh.admin.dao.SysUserDao">

    <resultMap type="cn.tlh.admin.common.pojo.system.SysUser" id="SysUserMap">
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="deptId" column="dept_id" jdbcType="INTEGER"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="nickName" column="nick_name" jdbcType="VARCHAR"/>
        <result property="gender" column="gender" jdbcType="VARCHAR"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="avatarName" column="avatar_name" jdbcType="VARCHAR"/>
        <result property="avatarPath" column="avatar_path" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="isAdmin" column="is_admin" jdbcType="OTHER"/>
        <result property="enabled" column="enabled" jdbcType="INTEGER"/>
        <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="pwdResetTime" column="pwd_reset_time" jdbcType="TIMESTAMP"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="SysUserMap">
        select
          user_id, dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path, password, is_admin, enabled, create_by, update_by, pwd_reset_time, create_time, update_time
        from sdnd.sys_user
        where user_id = #{userId}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="selectList" resultMap="SysUserMap">
        select
        user_id, dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path, password, is_admin,
        enabled, create_by, update_by, pwd_reset_time, create_time, update_time
        from sdnd.sys_user
        <where>
            <if test="req.deptId != null">
                and dept_id = #{req.deptId}
            </if>
            <if test="req.username != null and req.username != ''">
                and username = #{req.username}
            </if>
            <if test="req.nickName != null and req.nickName != ''">
                and nick_name = #{req.nickName}
            </if>
            <if test="req.email != null and req.email != ''">
                and email = #{req.email}
            </if>
            <if test="req.enabled != null">
                and enabled = #{req.enabled}
            </if>
            <if test="req.startTime != null">
                and create_time &gt; #{startTime}
            </if>
            <if test="req.endTime != null">
                and create_time &lt; #{req.endTime}
            </if>
        </where>
    </select>
    <select id="findByUsername" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        select * from sdnd.sys_user where username = #{username}
    </select>
    <select id="findByEmail" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        select * from sdnd.sys_user where email = #{email}
    </select>
    <select id="findByPhone" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        select * from sdnd.sys_user where phone = #{phone}
    </select>
    <select id="findByRoleId" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        SELECT u.* FROM sys_user u, sys_users_roles r WHERE u.user_id = r.user_id AND r.role_id = #{roleId}
    </select>
    <select id="findByDeptRoleId" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        SELECT u.* FROM sys_user u, sys_users_roles r, sys_roles_depts d WHERE u.user_id = r.user_id AND r.role_id = d.role_id AND r.role_id = #{id} group by u.user_id
    </select>
    <select id="findByMenuId" resultType="cn.tlh.admin.common.pojo.system.SysUser">
        SELECT u.* FROM sys_user u, sys_users_roles ur, sys_roles_menus rm WHERE u.user_id = ur.user_id AND ur.role_id = rm.role_id AND rm.menu_id = #{id} group by u.user_id
    </select>
    <select id="countByJobs" resultType="java.lang.Integer">
        SELECT count(1) FROM sys_user u, sys_users_jobs j WHERE u.user_id = j.user_id AND j.job_id IN
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="countByDepts" resultType="java.lang.Integer">
        SELECT count(1) FROM sys_user u WHERE u.dept_id IN
        <foreach item="item" index="index" collection="deptIds"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="countByRoles" resultType="java.lang.Integer">
        SELECT count(1) FROM sys_user u, sys_users_roles r WHERE u.user_id = r.user_id AND r.role_id in
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into sdnd.sys_user(dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path, password, is_admin, enabled, create_by, update_by, pwd_reset_time, create_time, update_time)
        values (#{deptId}, #{username}, #{nickName}, #{gender}, #{phone}, #{email}, #{avatarName}, #{avatarPath}, #{password}, #{isAdmin}, #{enabled}, #{createBy}, #{updateBy}, #{pwdResetTime}, #{createTime}, #{updateTime})
    </insert>

    <insert id="insertBatch" keyProperty="userId" useGeneratedKeys="true">
        insert into sdnd.sys_user(dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path,
        password, is_admin, enabled, create_by, update_by, pwd_reset_time, create_time, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.deptId}, #{entity.username}, #{entity.nickName}, #{entity.gender}, #{entity.phone},
            #{entity.email}, #{entity.avatarName}, #{entity.avatarPath}, #{entity.password}, #{entity.isAdmin},
            #{entity.enabled}, #{entity.createBy}, #{entity.updateBy}, #{entity.pwdResetTime}, #{entity.createTime},
            #{entity.updateTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="userId" useGeneratedKeys="true">
        insert into sdnd.sys_user(dept_id, username, nick_name, gender, phone, email, avatar_name, avatar_path,
        password, is_admin, enabled, create_by, update_by, pwd_reset_time, create_time, update_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.deptId}, #{entity.username}, #{entity.nickName}, #{entity.gender}, #{entity.phone},
            #{entity.email}, #{entity.avatarName}, #{entity.avatarPath}, #{entity.password}, #{entity.isAdmin},
            #{entity.enabled}, #{entity.createBy}, #{entity.updateBy}, #{entity.pwdResetTime}, #{entity.createTime},
            #{entity.updateTime})
        </foreach>
        on duplicate key update
        dept_id = values(dept_id) , username = values(username) , nick_name = values(nick_name) , gender =
        values(gender) , phone = values(phone) , email = values(email) , avatar_name = values(avatar_name) , avatar_path
        = values(avatar_path) , password = values(password) , is_admin = values(is_admin) , enabled = values(enabled) ,
        create_by = values(create_by) , update_by = values(update_by) , pwd_reset_time = values(pwd_reset_time) ,
        create_time = values(create_time) , update_time = values(update_time)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update sdnd.sys_user
        <set>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="username != null and username != ''">
                username = #{username},
            </if>
            <if test="nickName != null and nickName != ''">
                nick_name = #{nickName},
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="avatarName != null and avatarName != ''">
                avatar_name = #{avatarName},
            </if>
            <if test="avatarPath != null and avatarPath != ''">
                avatar_path = #{avatarPath},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="isAdmin != null">
                is_admin = #{isAdmin},
            </if>
            <if test="enabled != null">
                enabled = #{enabled},
            </if>
            <if test="createBy != null and createBy != ''">
                create_by = #{createBy},
            </if>
            <if test="updateBy != null and updateBy != ''">
                update_by = #{updateBy},
            </if>
            <if test="pwdResetTime != null">
                pwd_reset_time = #{pwdResetTime},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where user_id = #{userId}
    </update>
    <update id="updatePass">
        update sys_user set password = #{param2} , pwd_reset_time = #{param3} where username = #{param1}
    </update>
    <update id="updateEmail">
        update sys_user set email = #{param2} where username = #{param1}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from sdnd.sys_user where user_id = #{userId}
    </delete>
    <delete id="deleteAllByIdIn">
        delete from sdnd.sys_user where user_id in
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>